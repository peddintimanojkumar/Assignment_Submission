{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\manup\\\\Desktop\\\\New folder\\\\my-app\\\\src\\\\CircleAnimation.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\n\n// Example lion-face dot network (partial, *fine-tune coordinates for full face*)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DOTS = [\n// Inner black face dots\n{\n  x: 200,\n  y: 180,\n  color: \"black\",\n  fixed: true\n},\n// nose\n{\n  x: 170,\n  y: 160,\n  color: \"black\",\n  fixed: true\n},\n// left eye\n{\n  x: 230,\n  y: 160,\n  color: \"black\",\n  fixed: true\n},\n// right eye\n{\n  x: 150,\n  y: 220,\n  color: \"black\",\n  fixed: true\n},\n// left mouth\n{\n  x: 250,\n  y: 220,\n  color: \"black\",\n  fixed: true\n},\n// right mouth\n\n// (Add more black dots as in your image...)\n\n// Gradient dots (add as many as needed for the mane)\n...[...Array(24)].map((_, i) => ({\n  x: 200 + 120 * Math.cos(i / 24 * 2 * Math.PI),\n  y: 200 + 120 * Math.sin(i / 24 * 2 * Math.PI),\n  color: `hsl(${240 * (i / 24)}, 85%, 60%)`,\n  fixed: false\n}))];\n\n// Example dynamic connections (index pairs, connect more for detailed face)\nconst CONNECTIONS = [[0, 1], [0, 2], [1, 3], [2, 4],\n// connect mane\n...Array(24).fill().map((_, i) => [5 + i, 5 + (i + 1) % 24])];\nexport default function DotLion() {\n  _s();\n  const [dots, setDots] = useState([]);\n  // State for animating from center/circle/diamond can be added;\n  // here, just immediately set to lion face\n  useEffect(() => setDots(DOTS), []);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: 400,\n    height: 400,\n    style: {\n      background: \"#fff\",\n      display: \"block\",\n      margin: \"40px auto\"\n    },\n    children: [CONNECTIONS.map(([a, b], idx) => {\n      var _dots$a, _dots$a2, _dots$b, _dots$b2;\n      return /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: (_dots$a = dots[a]) === null || _dots$a === void 0 ? void 0 : _dots$a.x,\n        y1: (_dots$a2 = dots[a]) === null || _dots$a2 === void 0 ? void 0 : _dots$a2.y,\n        x2: (_dots$b = dots[b]) === null || _dots$b === void 0 ? void 0 : _dots$b.x,\n        y2: (_dots$b2 = dots[b]) === null || _dots$b2 === void 0 ? void 0 : _dots$b2.y,\n        stroke: \"#888\",\n        strokeWidth: 2,\n        strokeDasharray: \"3 5\"\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this);\n    }), dots.map((dot, i) => /*#__PURE__*/_jsxDEV(\"circle\", {\n      cx: dot.x,\n      cy: dot.y,\n      r: dot.fixed ? 8 : 6,\n      fill: dot.fixed ? \"#111\" : dot.color,\n      stroke: \"#fff\"\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(DotLion, \"Hb0TmV8C2JEhE203+Slzk088ioo=\");\n_c = DotLion;\nvar _c;\n$RefreshReg$(_c, \"DotLion\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","DOTS","x","y","color","fixed","Array","map","_","i","Math","cos","PI","sin","CONNECTIONS","fill","DotLion","_s","dots","setDots","width","height","style","background","display","margin","children","a","b","idx","_dots$a","_dots$a2","_dots$b","_dots$b2","x1","y1","x2","y2","stroke","strokeWidth","strokeDasharray","fileName","_jsxFileName","lineNumber","columnNumber","dot","cx","cy","r","_c","$RefreshReg$"],"sources":["C:/Users/manup/Desktop/New folder/my-app/src/CircleAnimation.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\n// Example lion-face dot network (partial, *fine-tune coordinates for full face*)\r\nconst DOTS = [\r\n  // Inner black face dots\r\n  { x: 200, y: 180, color: \"black\", fixed: true }, // nose\r\n  { x: 170, y: 160, color: \"black\", fixed: true }, // left eye\r\n  { x: 230, y: 160, color: \"black\", fixed: true }, // right eye\r\n  { x: 150, y: 220, color: \"black\", fixed: true }, // left mouth\r\n  { x: 250, y: 220, color: \"black\", fixed: true }, // right mouth\r\n\r\n  // (Add more black dots as in your image...)\r\n\r\n  // Gradient dots (add as many as needed for the mane)\r\n  ...[...Array(24)].map((_, i) => ({\r\n    x: 200 + 120 * Math.cos((i / 24) * 2 * Math.PI),\r\n    y: 200 + 120 * Math.sin((i / 24) * 2 * Math.PI),\r\n    color: `hsl(${240 * (i / 24)}, 85%, 60%)`,\r\n    fixed: false,\r\n  })),\r\n];\r\n\r\n// Example dynamic connections (index pairs, connect more for detailed face)\r\nconst CONNECTIONS = [\r\n  [0, 1], [0, 2], [1, 3], [2, 4],\r\n  // connect mane\r\n  ...Array(24).fill().map((_, i) => [5 + i, 5 + ((i + 1) % 24)]),\r\n];\r\n\r\nexport default function DotLion() {\r\n  const [dots, setDots] = useState([]);\r\n  // State for animating from center/circle/diamond can be added;\r\n  // here, just immediately set to lion face\r\n  useEffect(() => setDots(DOTS), []);\r\n\r\n  return (\r\n    <svg width={400} height={400} style={{ background: \"#fff\", display: \"block\", margin: \"40px auto\" }}>\r\n      {/* Render dotted lines */}\r\n      {CONNECTIONS.map(([a, b], idx) => (\r\n        <line\r\n          key={idx}\r\n          x1={dots[a]?.x}\r\n          y1={dots[a]?.y}\r\n          x2={dots[b]?.x}\r\n          y2={dots[b]?.y}\r\n          stroke=\"#888\"\r\n          strokeWidth={2}\r\n          strokeDasharray=\"3 5\"\r\n        />\r\n      ))}\r\n      {/* Render dots */}\r\n      {dots.map((dot, i) => (\r\n        <circle\r\n          key={i}\r\n          cx={dot.x}\r\n          cy={dot.y}\r\n          r={dot.fixed ? 8 : 6}\r\n          fill={dot.fixed ? \"#111\" : dot.color}\r\n          stroke=\"#fff\"\r\n        />\r\n      ))}\r\n    </svg>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
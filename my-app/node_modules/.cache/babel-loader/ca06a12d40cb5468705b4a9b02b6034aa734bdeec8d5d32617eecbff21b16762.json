{"ast":null,"code":"// import React from \"react\";\n// import { motion } from \"framer-motion\";\n// import \"./App.css\";\n\n// export default function App({\n//   size = 360,\n//   dotSize = 14,\n//   centerSize = 12,\n//   duration = 10,\n// }) {\n//   const radius = Math.round(size * 0.36);\n\n//   // Circle positions\n//   const circle = Array.from({ length: 8 }, (_, i) => {\n//     const angle = (i * 45 * Math.PI) / 180;\n//     return { x: Math.cos(angle) * radius, y: Math.sin(angle) * radius };\n//   });\n\n//   // Diamond positions\n//   const diamond = [\n//     { x: 0, y: -radius, color: \"red\" },      // top\n//     { x: radius, y: 0, color: \"blue\" },      // right\n//     { x: 0, y: radius, color: \"purple\" },    // bottom\n//     { x: -radius, y: 0, color: \"orange\" },   // left\n//     { x: radius * 0.7, y: -radius * 0.7, color: \"blue\" },\n//     { x: radius * 0.7, y: radius * 0.7, color: \"purple\" },\n//     { x: -radius * 0.7, y: radius * 0.7, color: \"orange\" },\n//     { x: -radius * 0.7, y: -radius * 0.7, color: \"red\" },\n//   ];\n\n//   // Edge connections\n//   const connections = [\n//     [0, 4], [4, 1], [1, 5], [5, 2], [2, 6], [6, 3], [3, 7], [7, 0], // outer\n//     [4, 5], [5, 6], [6, 7], [7, 4] // inner\n//   ];\n\n//   // Center-to-dots\n//   const times = [0, 0.3, 0.6, 1];\n\n//   return (\n//     <div className=\"app-container\">\n//       <svg\n//         className=\"overlay-svg\"\n//         width={size}\n//         height={size}\n//         viewBox={`${-size / 2} ${-size / 2} ${size} ${size}`}\n//       >\n//         {/* Center-to-dots lines */}\n//         {diamond.map((d, i) => (\n//           <motion.line\n//             key={`center-${i}`}\n//             x1={0}\n//             y1={0}\n//             x2={d.x}\n//             y2={d.y}\n//             stroke=\"gray\"\n//             strokeWidth=\"1.5\"\n//             strokeDasharray=\"4,4\"\n//             initial={{ pathLength: 0 }}\n//             animate={{ pathLength: [0, 0, 0, 1] }}\n//             transition={{\n//               duration,\n//               times,\n//               ease: \"easeInOut\",\n//               repeat: Infinity,\n//               repeatType: \"mirror\", // forward then backward\n//             }}\n//           />\n//         ))}\n\n//         {/* Edge dotted lines */}\n//         {connections.map(([s, e], idx) => {\n//           const start = diamond[s];\n//           const end = diamond[e];\n//           return (\n//             <motion.line\n//               key={`edge-${idx}`}\n//               x1={start.x}\n//               y1={start.y}\n//               x2={end.x}\n//               y2={end.y}\n//               stroke=\"limegreen\"\n//               strokeWidth=\"2\"\n//               strokeDasharray=\"6,6\"\n//               initial={{ pathLength: 0 }}\n//               animate={{ pathLength: [0, 0, 0, 1] }}\n//               transition={{\n//                 duration,\n//                 times,\n//                 ease: \"easeInOut\",\n//                 repeat: Infinity,\n//                 repeatType: \"mirror\", // smooth reverse\n//               }}\n//             />\n//           );\n//         })}\n\n//         {/* Dots */}\n//         {diamond.map((target, i) => {\n//           const c = circle[i];\n//           return (\n//             <motion.circle\n//               key={`dot-${i}`}\n//               r={dotSize / 2}\n//               fill={target.color}\n//               initial={{ cx: 0, cy: 0 }}\n//               animate={{\n//                 cx: [0, c.x, target.x, target.x],\n//                 cy: [0, c.y, target.y, target.y]\n//               }}\n//               transition={{\n//                 duration,\n//                 times,\n//                 ease: \"easeInOut\",\n//                 repeat: Infinity,\n//                 repeatType: \"mirror\", // forward then backward\n//               }}\n//             />\n//           );\n//         })}\n\n//         {/* Center dot */}\n//         <circle cx={0} cy={0} r={centerSize / 2} fill=\"black\" />\n//       </svg>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/manup/Desktop/New folder/my-app/src/App.js"],"sourcesContent":["// import React from \"react\";\n// import { motion } from \"framer-motion\";\n// import \"./App.css\";\n\n// export default function App({\n//   size = 360,\n//   dotSize = 14,\n//   centerSize = 12,\n//   duration = 10,\n// }) {\n//   const radius = Math.round(size * 0.36);\n\n//   // Circle positions\n//   const circle = Array.from({ length: 8 }, (_, i) => {\n//     const angle = (i * 45 * Math.PI) / 180;\n//     return { x: Math.cos(angle) * radius, y: Math.sin(angle) * radius };\n//   });\n\n//   // Diamond positions\n//   const diamond = [\n//     { x: 0, y: -radius, color: \"red\" },      // top\n//     { x: radius, y: 0, color: \"blue\" },      // right\n//     { x: 0, y: radius, color: \"purple\" },    // bottom\n//     { x: -radius, y: 0, color: \"orange\" },   // left\n//     { x: radius * 0.7, y: -radius * 0.7, color: \"blue\" },\n//     { x: radius * 0.7, y: radius * 0.7, color: \"purple\" },\n//     { x: -radius * 0.7, y: radius * 0.7, color: \"orange\" },\n//     { x: -radius * 0.7, y: -radius * 0.7, color: \"red\" },\n//   ];\n\n//   // Edge connections\n//   const connections = [\n//     [0, 4], [4, 1], [1, 5], [5, 2], [2, 6], [6, 3], [3, 7], [7, 0], // outer\n//     [4, 5], [5, 6], [6, 7], [7, 4] // inner\n//   ];\n\n//   // Center-to-dots\n//   const times = [0, 0.3, 0.6, 1];\n\n//   return (\n//     <div className=\"app-container\">\n//       <svg\n//         className=\"overlay-svg\"\n//         width={size}\n//         height={size}\n//         viewBox={`${-size / 2} ${-size / 2} ${size} ${size}`}\n//       >\n//         {/* Center-to-dots lines */}\n//         {diamond.map((d, i) => (\n//           <motion.line\n//             key={`center-${i}`}\n//             x1={0}\n//             y1={0}\n//             x2={d.x}\n//             y2={d.y}\n//             stroke=\"gray\"\n//             strokeWidth=\"1.5\"\n//             strokeDasharray=\"4,4\"\n//             initial={{ pathLength: 0 }}\n//             animate={{ pathLength: [0, 0, 0, 1] }}\n//             transition={{\n//               duration,\n//               times,\n//               ease: \"easeInOut\",\n//               repeat: Infinity,\n//               repeatType: \"mirror\", // forward then backward\n//             }}\n//           />\n//         ))}\n\n//         {/* Edge dotted lines */}\n//         {connections.map(([s, e], idx) => {\n//           const start = diamond[s];\n//           const end = diamond[e];\n//           return (\n//             <motion.line\n//               key={`edge-${idx}`}\n//               x1={start.x}\n//               y1={start.y}\n//               x2={end.x}\n//               y2={end.y}\n//               stroke=\"limegreen\"\n//               strokeWidth=\"2\"\n//               strokeDasharray=\"6,6\"\n//               initial={{ pathLength: 0 }}\n//               animate={{ pathLength: [0, 0, 0, 1] }}\n//               transition={{\n//                 duration,\n//                 times,\n//                 ease: \"easeInOut\",\n//                 repeat: Infinity,\n//                 repeatType: \"mirror\", // smooth reverse\n//               }}\n//             />\n//           );\n//         })}\n\n//         {/* Dots */}\n//         {diamond.map((target, i) => {\n//           const c = circle[i];\n//           return (\n//             <motion.circle\n//               key={`dot-${i}`}\n//               r={dotSize / 2}\n//               fill={target.color}\n//               initial={{ cx: 0, cy: 0 }}\n//               animate={{\n//                 cx: [0, c.x, target.x, target.x],\n//                 cy: [0, c.y, target.y, target.y]\n//               }}\n//               transition={{\n//                 duration,\n//                 times,\n//                 ease: \"easeInOut\",\n//                 repeat: Infinity,\n//                 repeatType: \"mirror\", // forward then backward\n//               }}\n//             />\n//           );\n//         })}\n\n//         {/* Center dot */}\n//         <circle cx={0} cy={0} r={centerSize / 2} fill=\"black\" />\n//       </svg>\n//     </div>\n//   );\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
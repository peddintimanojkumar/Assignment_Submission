{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\manup\\\\Desktop\\\\New folder\\\\my-app\\\\src\\\\CircleAnimation.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\n\n// Example: define the fixed lion shape (adjust positions to your SVG needs)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst lionDots = [\n// { x, y, color, id }\n{\n  x: 110,\n  y: 30,\n  color: \"black\",\n  id: 0\n}, {\n  x: 80,\n  y: 60,\n  color: \"black\",\n  id: 1\n}\n// ... Fill out all dots with appropriate x, y (SVG coordinates) and colors\n// Set color: \"black\" for black dots, color: null for gradient dots\n];\n\n// Define connections as pairs of dot indices\nconst lionConnections = [[0, 1]\n// ... More pairs: [dotA, dotB]\n];\n\n// Generate gradient for non-black dots (returns CSS color)\nfunction getGradientColor(idx, total) {\n  // Linear interpolate from red to blue\n  const r = Math.round(255 * (1 - idx / total));\n  const g = 50;\n  const b = Math.round(255 * (idx / total));\n  return `rgb(${r},${g},${b})`;\n}\n\n// SVG canvas size\nconst size = 220;\nexport default function LionDotNetwork() {\n  _s();\n  const [shape, setShape] = useState(\"circle\"); // OR diamond, OR lion\n\n  // Cycle through states automatically\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShape(shape === \"circle\" ? \"diamond\" : shape === \"diamond\" ? \"lion\" : \"circle\");\n    }, 3000);\n    return () => clearTimeout(timeout);\n  }, [shape]);\n\n  // Animate between shapes: interpolate positions if needed (not shown for clarity)\n\n  // For final lion shape, use lionDots.\n  // For other shapes, compute positions in circle or diamond pattern.\n\n  // Render SVG\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: size,\n    height: size,\n    style: {\n      display: \"block\",\n      margin: \"40px auto\"\n    },\n    children: [shape === \"lion\" && lionConnections.map(([a, b], idx) => {\n      const dotA = lionDots[a];\n      const dotB = lionDots[b];\n      return /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: dotA.x,\n        y1: dotA.y,\n        x2: dotB.x,\n        y2: dotB.y,\n        stroke: \"#bbb\",\n        strokeDasharray: \"2,2\"\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this);\n    }), lionDots.map((dot, idx) => /*#__PURE__*/_jsxDEV(\"circle\", {\n      cx: dot.x,\n      cy: dot.y,\n      r: 8,\n      fill: dot.color === \"black\" ? \"#111\" : getGradientColor(idx, lionDots.length),\n      stroke: \"#111\",\n      strokeWidth: dot.color === \"black\" ? 2 : 0,\n      style: {\n        transition: \"fill 0.7s, cx 1.5s, cy 1.5s\"\n      }\n    }, dot.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(LionDotNetwork, \"hVGMjr/HtGcP0tBNdZINjJjs9H0=\");\n_c = LionDotNetwork;\nvar _c;\n$RefreshReg$(_c, \"LionDotNetwork\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","lionDots","x","y","color","id","lionConnections","getGradientColor","idx","total","r","Math","round","g","b","size","LionDotNetwork","_s","shape","setShape","timeout","setTimeout","clearTimeout","width","height","style","display","margin","children","map","a","dotA","dotB","x1","y1","x2","y2","stroke","strokeDasharray","fileName","_jsxFileName","lineNumber","columnNumber","dot","cx","cy","fill","length","strokeWidth","transition","_c","$RefreshReg$"],"sources":["C:/Users/manup/Desktop/New folder/my-app/src/CircleAnimation.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\n// Example: define the fixed lion shape (adjust positions to your SVG needs)\r\nconst lionDots = [\r\n  // { x, y, color, id }\r\n  { x: 110, y: 30, color: \"black\", id: 0 },\r\n  { x: 80, y: 60, color: \"black\", id: 1 },\r\n  // ... Fill out all dots with appropriate x, y (SVG coordinates) and colors\r\n  // Set color: \"black\" for black dots, color: null for gradient dots\r\n];\r\n\r\n// Define connections as pairs of dot indices\r\nconst lionConnections = [\r\n  [0, 1],\r\n  // ... More pairs: [dotA, dotB]\r\n];\r\n\r\n// Generate gradient for non-black dots (returns CSS color)\r\nfunction getGradientColor(idx, total) {\r\n  // Linear interpolate from red to blue\r\n  const r = Math.round(255 * (1 - idx / total));\r\n  const g = 50;\r\n  const b = Math.round(255 * (idx / total));\r\n  return `rgb(${r},${g},${b})`;\r\n}\r\n\r\n// SVG canvas size\r\nconst size = 220;\r\n\r\nexport default function LionDotNetwork() {\r\n  const [shape, setShape] = useState(\"circle\"); // OR diamond, OR lion\r\n\r\n  // Cycle through states automatically\r\n  useEffect(() => {\r\n    const timeout = setTimeout(() => {\r\n      setShape(shape === \"circle\" ? \"diamond\" : shape === \"diamond\" ? \"lion\" : \"circle\");\r\n    }, 3000);\r\n    return () => clearTimeout(timeout);\r\n  }, [shape]);\r\n\r\n  // Animate between shapes: interpolate positions if needed (not shown for clarity)\r\n\r\n  // For final lion shape, use lionDots.\r\n  // For other shapes, compute positions in circle or diamond pattern.\r\n\r\n  // Render SVG\r\n  return (\r\n    <svg width={size} height={size} style={{ display: \"block\", margin: \"40px auto\" }}>\r\n      {/* Draw lines */}\r\n      {shape === \"lion\" && lionConnections.map(([a, b], idx) => {\r\n        const dotA = lionDots[a];\r\n        const dotB = lionDots[b];\r\n        return (\r\n          <line\r\n            key={idx}\r\n            x1={dotA.x}\r\n            y1={dotA.y}\r\n            x2={dotB.x}\r\n            y2={dotB.y}\r\n            stroke=\"#bbb\"\r\n            strokeDasharray=\"2,2\"\r\n          />\r\n        );\r\n      })}\r\n      {/* Draw dots */}\r\n      {lionDots.map((dot, idx) => (\r\n        <circle\r\n          key={dot.id}\r\n          cx={dot.x}\r\n          cy={dot.y}\r\n          r={8}\r\n          fill={dot.color === \"black\" ? \"#111\" : getGradientColor(idx, lionDots.length)}\r\n          stroke=\"#111\"\r\n          strokeWidth={dot.color === \"black\" ? 2 : 0}\r\n          style={{ transition: \"fill 0.7s, cx 1.5s, cy 1.5s\" }}\r\n        />\r\n      ))}\r\n    </svg>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
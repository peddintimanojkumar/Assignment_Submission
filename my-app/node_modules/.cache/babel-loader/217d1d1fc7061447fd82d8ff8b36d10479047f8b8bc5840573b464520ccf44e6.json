{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\manup\\\\Desktop\\\\New folder\\\\my-app\\\\src\\\\App.js\";\n// import React from \"react\";\n// import { motion } from \"framer-motion\";\n// import \"./App.css\";\n\n// export default function App({\n//   size = 360,\n//   dotSize = 14,\n//   centerSize = 12,\n//   duration = 10,\n// }) {\n//   const radius = Math.round(size * 0.36);\n\n//   // Circle positions\n//   const circle = Array.from({ length: 8 }, (_, i) => {\n//     const angle = (i * 45 * Math.PI) / 180;\n//     return { x: Math.cos(angle) * radius, y: Math.sin(angle) * radius };\n//   });\n\n//   // Diamond positions\n//   const diamond = [\n//     { x: 0, y: -radius, color: \"red\" },      // top\n//     { x: radius, y: 0, color: \"blue\" },      // right\n//     { x: 0, y: radius, color: \"purple\" },    // bottom\n//     { x: -radius, y: 0, color: \"orange\" },   // left\n//     { x: radius * 0.7, y: -radius * 0.7, color: \"blue\" },\n//     { x: radius * 0.7, y: radius * 0.7, color: \"purple\" },\n//     { x: -radius * 0.7, y: radius * 0.7, color: \"orange\" },\n//     { x: -radius * 0.7, y: -radius * 0.7, color: \"red\" },\n//   ];\n\n//   // Edge connections\n//   const connections = [\n//     [0, 4], [4, 1], [1, 5], [5, 2], [2, 6], [6, 3], [3, 7], [7, 0], // outer\n//     [4, 5], [5, 6], [6, 7], [7, 4] // inner\n//   ];\n\n//   // Center-to-dots\n//   const times = [0, 0.3, 0.6, 1];\n\n//   return (\n//     <div className=\"app-container\">\n//       <svg\n//         className=\"overlay-svg\"\n//         width={size}\n//         height={size}\n//         viewBox={`${-size / 2} ${-size / 2} ${size} ${size}`}\n//       >\n//         {/* Center-to-dots lines */}\n//         {diamond.map((d, i) => (\n//           <motion.line\n//             key={`center-${i}`}\n//             x1={0}\n//             y1={0}\n//             x2={d.x}\n//             y2={d.y}\n//             stroke=\"gray\"\n//             strokeWidth=\"1.5\"\n//             strokeDasharray=\"4,4\"\n//             initial={{ pathLength: 0 }}\n//             animate={{ pathLength: [0, 0, 0, 1] }}\n//             transition={{\n//               duration,\n//               times,\n//               ease: \"easeInOut\",\n//               repeat: Infinity,\n//               repeatType: \"mirror\", // forward then backward\n//             }}\n//           />\n//         ))}\n\n//         {/* Edge dotted lines */}\n//         {connections.map(([s, e], idx) => {\n//           const start = diamond[s];\n//           const end = diamond[e];\n//           return (\n//             <motion.line\n//               key={`edge-${idx}`}\n//               x1={start.x}\n//               y1={start.y}\n//               x2={end.x}\n//               y2={end.y}\n//               stroke=\"limegreen\"\n//               strokeWidth=\"2\"\n//               strokeDasharray=\"6,6\"\n//               initial={{ pathLength: 0 }}\n//               animate={{ pathLength: [0, 0, 0, 1] }}\n//               transition={{\n//                 duration,\n//                 times,\n//                 ease: \"easeInOut\",\n//                 repeat: Infinity,\n//                 repeatType: \"mirror\", // smooth reverse\n//               }}\n//             />\n//           );\n//         })}\n\n//         {/* Dots */}\n//         {diamond.map((target, i) => {\n//           const c = circle[i];\n//           return (\n//             <motion.circle\n//               key={`dot-${i}`}\n//               r={dotSize / 2}\n//               fill={target.color}\n//               initial={{ cx: 0, cy: 0 }}\n//               animate={{\n//                 cx: [0, c.x, target.x, target.x],\n//                 cy: [0, c.y, target.y, target.y]\n//               }}\n//               transition={{\n//                 duration,\n//                 times,\n//                 ease: \"easeInOut\",\n//                 repeat: Infinity,\n//                 repeatType: \"mirror\", // forward then backward\n//               }}\n//             />\n//           );\n//         })}\n\n//         {/* Center dot */}\n//         <circle cx={0} cy={0} r={centerSize / 2} fill=\"black\" />\n//       </svg>\n//     </div>\n//   );\n// }\n\nimport React from \"react\";\nimport { motion } from \"framer-motion\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App({\n  size = 360,\n  dotSize = 14,\n  centerSize = 12,\n  duration = 2\n}) {\n  const radius = Math.round(size * 0.36);\n\n  // Circle positions (outer)\n  const circle = Array.from({\n    length: 8\n  }, (_, i) => {\n    const angle = i * 45 * Math.PI / 180;\n    return {\n      x: Math.cos(angle) * radius,\n      y: Math.sin(angle) * radius\n    };\n  });\n\n  // Smaller circle (closer to center)\n  const miniCircle = circle.map(c => ({\n    x: c.x * 0.4,\n    // shrink radius to 40%\n    y: c.y * 0.4\n  }));\n\n  // Diamond positions (polygon shape)\n  const diamond = [{\n    x: 0,\n    y: -radius,\n    color: \"red\"\n  },\n  // top\n  {\n    x: radius,\n    y: 0,\n    color: \"blue\"\n  },\n  // right\n  {\n    x: 0,\n    y: radius,\n    color: \"purple\"\n  },\n  // bottom\n  {\n    x: -radius,\n    y: 0,\n    color: \"orange\"\n  },\n  // left\n  {\n    x: radius * 0.7,\n    y: -radius * 0.7,\n    color: \"blue\"\n  },\n  // top-right\n  {\n    x: radius * 0.7,\n    y: radius * 0.7,\n    color: \"purple\"\n  },\n  // bottom-right\n  {\n    x: -radius * 0.7,\n    y: radius * 0.7,\n    color: \"orange\"\n  },\n  // bottom-left\n  {\n    x: -radius * 0.7,\n    y: -radius * 0.7,\n    color: \"red\"\n  } // top-left\n  ];\n\n  // Edge connections (diamond polygon + inner square)\n  const connections = [[0, 4], [4, 1], [1, 5], [5, 2], [2, 6], [6, 3], [3, 7], [7, 0], [4, 5], [5, 6], [6, 7], [7, 4]];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      className: \"overlay-svg\",\n      width: size,\n      height: size,\n      viewBox: `${-size / 2} ${-size / 2} ${size} ${size}`,\n      children: [connections.map(([s, e], idx) => {\n        const start = diamond[s];\n        const end = diamond[e];\n        return /*#__PURE__*/_jsxDEV(motion.line, {\n          x1: start.x,\n          y1: start.y,\n          x2: end.x,\n          y2: end.y,\n          stroke: \"limegreen\",\n          strokeWidth: \"2\",\n          strokeDasharray: \"6,6\",\n          initial: {\n            pathLength: 0\n          },\n          animate: {\n            pathLength: [0, 1, 0]\n          },\n          transition: {\n            duration: duration * 4,\n            ease: \"easeInOut\",\n            repeat: Infinity,\n            delay: idx * 0.3 // sequential animation\n          }\n        }, `edge-${idx}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this);\n      }), diamond.map((target, i) => {\n        const c = circle[i];\n        const mini = miniCircle[i];\n        return /*#__PURE__*/_jsxDEV(motion.circle, {\n          r: dotSize / 2,\n          fill: target.color,\n          initial: {\n            cx: 0,\n            cy: 0\n          },\n          animate: {\n            cx: [0, mini.x, c.x, target.x, c.x, mini.x, 0],\n            cy: [0, mini.y, c.y, target.y, c.y, mini.y, 0]\n          },\n          transition: {\n            duration: duration * 6,\n            ease: \"easeInOut\",\n            repeat: Infinity,\n            delay: i * 0.2 // staggered motion\n          }\n        }, `dot-${i}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: 0,\n        cy: 0,\n        r: centerSize / 2,\n        fill: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","motion","jsxDEV","_jsxDEV","App","size","dotSize","centerSize","duration","radius","Math","round","circle","Array","from","length","_","i","angle","PI","x","cos","y","sin","miniCircle","map","c","diamond","color","connections","className","children","width","height","viewBox","s","e","idx","start","end","line","x1","y1","x2","y2","stroke","strokeWidth","strokeDasharray","initial","pathLength","animate","transition","ease","repeat","Infinity","delay","fileName","_jsxFileName","lineNumber","columnNumber","target","mini","r","fill","cx","cy","_c","$RefreshReg$"],"sources":["C:/Users/manup/Desktop/New folder/my-app/src/App.js"],"sourcesContent":["// import React from \"react\";\n// import { motion } from \"framer-motion\";\n// import \"./App.css\";\n\n// export default function App({\n//   size = 360,\n//   dotSize = 14,\n//   centerSize = 12,\n//   duration = 10,\n// }) {\n//   const radius = Math.round(size * 0.36);\n\n//   // Circle positions\n//   const circle = Array.from({ length: 8 }, (_, i) => {\n//     const angle = (i * 45 * Math.PI) / 180;\n//     return { x: Math.cos(angle) * radius, y: Math.sin(angle) * radius };\n//   });\n\n//   // Diamond positions\n//   const diamond = [\n//     { x: 0, y: -radius, color: \"red\" },      // top\n//     { x: radius, y: 0, color: \"blue\" },      // right\n//     { x: 0, y: radius, color: \"purple\" },    // bottom\n//     { x: -radius, y: 0, color: \"orange\" },   // left\n//     { x: radius * 0.7, y: -radius * 0.7, color: \"blue\" },\n//     { x: radius * 0.7, y: radius * 0.7, color: \"purple\" },\n//     { x: -radius * 0.7, y: radius * 0.7, color: \"orange\" },\n//     { x: -radius * 0.7, y: -radius * 0.7, color: \"red\" },\n//   ];\n\n//   // Edge connections\n//   const connections = [\n//     [0, 4], [4, 1], [1, 5], [5, 2], [2, 6], [6, 3], [3, 7], [7, 0], // outer\n//     [4, 5], [5, 6], [6, 7], [7, 4] // inner\n//   ];\n\n//   // Center-to-dots\n//   const times = [0, 0.3, 0.6, 1];\n\n//   return (\n//     <div className=\"app-container\">\n//       <svg\n//         className=\"overlay-svg\"\n//         width={size}\n//         height={size}\n//         viewBox={`${-size / 2} ${-size / 2} ${size} ${size}`}\n//       >\n//         {/* Center-to-dots lines */}\n//         {diamond.map((d, i) => (\n//           <motion.line\n//             key={`center-${i}`}\n//             x1={0}\n//             y1={0}\n//             x2={d.x}\n//             y2={d.y}\n//             stroke=\"gray\"\n//             strokeWidth=\"1.5\"\n//             strokeDasharray=\"4,4\"\n//             initial={{ pathLength: 0 }}\n//             animate={{ pathLength: [0, 0, 0, 1] }}\n//             transition={{\n//               duration,\n//               times,\n//               ease: \"easeInOut\",\n//               repeat: Infinity,\n//               repeatType: \"mirror\", // forward then backward\n//             }}\n//           />\n//         ))}\n\n//         {/* Edge dotted lines */}\n//         {connections.map(([s, e], idx) => {\n//           const start = diamond[s];\n//           const end = diamond[e];\n//           return (\n//             <motion.line\n//               key={`edge-${idx}`}\n//               x1={start.x}\n//               y1={start.y}\n//               x2={end.x}\n//               y2={end.y}\n//               stroke=\"limegreen\"\n//               strokeWidth=\"2\"\n//               strokeDasharray=\"6,6\"\n//               initial={{ pathLength: 0 }}\n//               animate={{ pathLength: [0, 0, 0, 1] }}\n//               transition={{\n//                 duration,\n//                 times,\n//                 ease: \"easeInOut\",\n//                 repeat: Infinity,\n//                 repeatType: \"mirror\", // smooth reverse\n//               }}\n//             />\n//           );\n//         })}\n\n//         {/* Dots */}\n//         {diamond.map((target, i) => {\n//           const c = circle[i];\n//           return (\n//             <motion.circle\n//               key={`dot-${i}`}\n//               r={dotSize / 2}\n//               fill={target.color}\n//               initial={{ cx: 0, cy: 0 }}\n//               animate={{\n//                 cx: [0, c.x, target.x, target.x],\n//                 cy: [0, c.y, target.y, target.y]\n//               }}\n//               transition={{\n//                 duration,\n//                 times,\n//                 ease: \"easeInOut\",\n//                 repeat: Infinity,\n//                 repeatType: \"mirror\", // forward then backward\n//               }}\n//             />\n//           );\n//         })}\n\n//         {/* Center dot */}\n//         <circle cx={0} cy={0} r={centerSize / 2} fill=\"black\" />\n//       </svg>\n//     </div>\n//   );\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport React from \"react\";\nimport { motion } from \"framer-motion\";\nimport \"./App.css\";\n\nexport default function App({\n  size = 360,\n  dotSize = 14,\n  centerSize = 12,\n  duration = 2,\n}) {\n  const radius = Math.round(size * 0.36);\n\n  // Circle positions (outer)\n  const circle = Array.from({ length: 8 }, (_, i) => {\n    const angle = (i * 45 * Math.PI) / 180;\n    return { x: Math.cos(angle) * radius, y: Math.sin(angle) * radius };\n  });\n\n  // Smaller circle (closer to center)\n  const miniCircle = circle.map((c) => ({\n    x: c.x * 0.4, // shrink radius to 40%\n    y: c.y * 0.4,\n  }));\n\n  // Diamond positions (polygon shape)\n  const diamond = [\n    { x: 0, y: -radius, color: \"red\" }, // top\n    { x: radius, y: 0, color: \"blue\" }, // right\n    { x: 0, y: radius, color: \"purple\" }, // bottom\n    { x: -radius, y: 0, color: \"orange\" }, // left\n    { x: radius * 0.7, y: -radius * 0.7, color: \"blue\" }, // top-right\n    { x: radius * 0.7, y: radius * 0.7, color: \"purple\" }, // bottom-right\n    { x: -radius * 0.7, y: radius * 0.7, color: \"orange\" }, // bottom-left\n    { x: -radius * 0.7, y: -radius * 0.7, color: \"red\" }, // top-left\n  ];\n\n  // Edge connections (diamond polygon + inner square)\n  const connections = [\n    [0, 4], [4, 1], [1, 5], [5, 2],\n    [2, 6], [6, 3], [3, 7], [7, 0],\n    [4, 5], [5, 6], [6, 7], [7, 4],\n  ];\n\n  return (\n    <div className=\"app-container\">\n      <svg\n        className=\"overlay-svg\"\n        width={size}\n        height={size}\n        viewBox={`${-size / 2} ${-size / 2} ${size} ${size}`}\n      >\n        {/* Diamond polygon edges */}\n        {connections.map(([s, e], idx) => {\n          const start = diamond[s];\n          const end = diamond[e];\n          return (\n            <motion.line\n              key={`edge-${idx}`}\n              x1={start.x}\n              y1={start.y}\n              x2={end.x}\n              y2={end.y}\n              stroke=\"limegreen\"\n              strokeWidth=\"2\"\n              strokeDasharray=\"6,6\"\n              initial={{ pathLength: 0 }}\n              animate={{ pathLength: [0, 1, 0] }}\n              transition={{\n                duration: duration * 4,\n                ease: \"easeInOut\",\n                repeat: Infinity,\n                delay: idx * 0.3, // sequential animation\n              }}\n            />\n          );\n        })}\n\n        {/* Moving dots */}\n        {diamond.map((target, i) => {\n          const c = circle[i];\n          const mini = miniCircle[i];\n          return (\n            <motion.circle\n              key={`dot-${i}`}\n              r={dotSize / 2}\n              fill={target.color}\n              initial={{ cx: 0, cy: 0 }}\n              animate={{\n                cx: [0, mini.x, c.x, target.x, c.x, mini.x, 0],\n                cy: [0, mini.y, c.y, target.y, c.y, mini.y, 0],\n              }}\n              transition={{\n                duration: duration * 6,\n                ease: \"easeInOut\",\n                repeat: Infinity,\n                delay: i * 0.2, // staggered motion\n              }}\n            />\n          );\n        })}\n\n        {/* Center dot */}\n        <circle cx={0} cy={0} r={centerSize / 2} fill=\"black\" />\n      </svg>\n    </div>\n  );\n}\n\n"],"mappings":";AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAiDA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,eAAe;AACtC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,eAAe,SAASC,GAAGA,CAAC;EAC1BC,IAAI,GAAG,GAAG;EACVC,OAAO,GAAG,EAAE;EACZC,UAAU,GAAG,EAAE;EACfC,QAAQ,GAAG;AACb,CAAC,EAAE;EACD,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACN,IAAI,GAAG,IAAI,CAAC;;EAEtC;EACA,MAAMO,MAAM,GAAGC,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAE;EAAE,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAK;IACjD,MAAMC,KAAK,GAAID,CAAC,GAAG,EAAE,GAAGP,IAAI,CAACS,EAAE,GAAI,GAAG;IACtC,OAAO;MAAEC,CAAC,EAAEV,IAAI,CAACW,GAAG,CAACH,KAAK,CAAC,GAAGT,MAAM;MAAEa,CAAC,EAAEZ,IAAI,CAACa,GAAG,CAACL,KAAK,CAAC,GAAGT;IAAO,CAAC;E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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
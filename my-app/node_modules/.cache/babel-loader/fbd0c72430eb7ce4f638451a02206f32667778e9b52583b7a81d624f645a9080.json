{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\manup\\\\Desktop\\\\New folder\\\\my-app\\\\src\\\\App.js\";\nimport React from \"react\";\nimport { motion } from \"framer-motion\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App({\n  size = 320,\n  dotSize = 14,\n  centerSize = 12,\n  duration = 8\n}) {\n  const radius = Math.round(size * 0.36);\n\n  // Step 1: Circle positions (initial state)\n  const circle = Array.from({\n    length: 8\n  }, (_, i) => {\n    const angle = i * 45 * Math.PI / 180;\n    return {\n      x: Math.cos(angle) * radius,\n      y: Math.sin(angle) * radius\n    };\n  });\n\n  // Step 2: Diamond/mesh positions (target state like image)\n  const diamond = [{\n    x: 0,\n    y: -radius,\n    color: \"red\"\n  },\n  // top\n  {\n    x: radius,\n    y: 0,\n    color: \"blue\"\n  },\n  // right\n  {\n    x: 0,\n    y: radius,\n    color: \"purple\"\n  },\n  // bottom\n  {\n    x: -radius,\n    y: 0,\n    color: \"orange\"\n  },\n  // left\n  {\n    x: radius * 0.7,\n    y: -radius * 0.7,\n    color: \"blue\"\n  }, {\n    x: radius * 0.7,\n    y: radius * 0.7,\n    color: \"purple\"\n  }, {\n    x: -radius * 0.7,\n    y: radius * 0.7,\n    color: \"orange\"\n  }, {\n    x: -radius * 0.7,\n    y: -radius * 0.7,\n    color: \"red\"\n  }];\n\n  // Connections between dots (indices into diamond array)\n  const connections = [[0, 4], [4, 1], [1, 5], [5, 2], [2, 6], [6, 3], [3, 7], [7, 0],\n  // outer diamond\n  [4, 5], [5, 6], [6, 7], [7, 4] // inner square\n  ];\n\n  // Center connections\n  const centerConnections = Array.from({\n    length: 8\n  }, (_, i) => [i, \"center\"]);\n\n  // Timeline: circle → diamond (with pause)\n  const times = [0, 0.5, 1];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      className: \"overlay-svg\",\n      width: size,\n      height: size,\n      viewBox: `${-size / 2} ${-size / 2} ${size} ${size}`,\n      children: [connections.map(([start, end], idx) => {\n        const s = diamond[start];\n        const e = diamond[end];\n        return /*#__PURE__*/_jsxDEV(motion.line, {\n          x1: s.x,\n          y1: s.y,\n          x2: e.x,\n          y2: e.y,\n          stroke: \"limegreen\",\n          strokeWidth: \"2\",\n          strokeDasharray: \"6,6\",\n          initial: {\n            pathLength: 0\n          },\n          animate: {\n            pathLength: [0, 1, 1]\n          },\n          transition: {\n            duration,\n            times,\n            ease: \"easeInOut\",\n            repeat: Infinity,\n            repeatType: \"loop\"\n          }\n        }, `edge-${idx}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this);\n      }), diamond.map((d, i) => /*#__PURE__*/_jsxDEV(motion.line, {\n        x1: 0,\n        y1: 0,\n        x2: d.x,\n        y2: d.y,\n        stroke: \"gray\",\n        strokeWidth: \"1.5\",\n        strokeDasharray: \"4,4\",\n        initial: {\n          pathLength: 0\n        },\n        animate: {\n          pathLength: [0, 1, 1]\n        },\n        transition: {\n          duration,\n          times,\n          ease: \"easeInOut\",\n          repeat: Infinity,\n          repeatType: \"loop\"\n        }\n      }, `center-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)), circle.map((cPos, i) => /*#__PURE__*/_jsxDEV(motion.circle, {\n        r: dotSize / 2,\n        fill: diamond[i].color,\n        initial: {\n          cx: cPos.x,\n          cy: cPos.y\n        },\n        animate: {\n          cx: [cPos.x, diamond[i].x, diamond[i].x],\n          cy: [cPos.y, diamond[i].y, diamond[i].y]\n        },\n        transition: {\n          duration,\n          times,\n          ease: \"easeInOut\",\n          repeat: Infinity,\n          repeatType: \"loop\"\n        }\n      }, `dot-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: 0,\n        cy: 0,\n        r: centerSize / 2,\n        fill: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","motion","jsxDEV","_jsxDEV","App","size","dotSize","centerSize","duration","radius","Math","round","circle","Array","from","length","_","i","angle","PI","x","cos","y","sin","diamond","color","connections","centerConnections","times","className","children","width","height","viewBox","map","start","end","idx","s","e","line","x1","y1","x2","y2","stroke","strokeWidth","strokeDasharray","initial","pathLength","animate","transition","ease","repeat","Infinity","repeatType","fileName","_jsxFileName","lineNumber","columnNumber","d","cPos","r","fill","cx","cy","_c","$RefreshReg$"],"sources":["C:/Users/manup/Desktop/New folder/my-app/src/App.js"],"sourcesContent":["import React from \"react\";\nimport { motion } from \"framer-motion\";\nimport \"./App.css\";\n\nexport default function App({\n  size = 320,\n  dotSize = 14,\n  centerSize = 12,\n  duration = 8,\n}) {\n  const radius = Math.round(size * 0.36);\n\n  // Step 1: Circle positions (initial state)\n  const circle = Array.from({ length: 8 }, (_, i) => {\n    const angle = (i * 45 * Math.PI) / 180;\n    return { x: Math.cos(angle) * radius, y: Math.sin(angle) * radius };\n  });\n\n  // Step 2: Diamond/mesh positions (target state like image)\n  const diamond = [\n    { x: 0, y: -radius, color: \"red\" },      // top\n    { x: radius, y: 0, color: \"blue\" },      // right\n    { x: 0, y: radius, color: \"purple\" },    // bottom\n    { x: -radius, y: 0, color: \"orange\" },   // left\n    { x: radius * 0.7, y: -radius * 0.7, color: \"blue\" },\n    { x: radius * 0.7, y: radius * 0.7, color: \"purple\" },\n    { x: -radius * 0.7, y: radius * 0.7, color: \"orange\" },\n    { x: -radius * 0.7, y: -radius * 0.7, color: \"red\" },\n  ];\n\n  // Connections between dots (indices into diamond array)\n  const connections = [\n    [0, 4], [4, 1], [1, 5], [5, 2], [2, 6], [6, 3], [3, 7], [7, 0], // outer diamond\n    [4, 5], [5, 6], [6, 7], [7, 4] // inner square\n  ];\n\n  // Center connections\n  const centerConnections = Array.from({ length: 8 }, (_, i) => [i, \"center\"]);\n\n  // Timeline: circle → diamond (with pause)\n  const times = [0, 0.5, 1];\n\n  return (\n    <div className=\"app-container\">\n      <svg\n        className=\"overlay-svg\"\n        width={size}\n        height={size}\n        viewBox={`${-size / 2} ${-size / 2} ${size} ${size}`}\n      >\n        {/* Outer + inner diamond dotted lines */}\n        {connections.map(([start, end], idx) => {\n          const s = diamond[start];\n          const e = diamond[end];\n          return (\n            <motion.line\n              key={`edge-${idx}`}\n              x1={s.x}\n              y1={s.y}\n              x2={e.x}\n              y2={e.y}\n              stroke=\"limegreen\"\n              strokeWidth=\"2\"\n              strokeDasharray=\"6,6\"\n              initial={{ pathLength: 0 }}\n              animate={{ pathLength: [0, 1, 1] }}\n              transition={{\n                duration,\n                times,\n                ease: \"easeInOut\",\n                repeat: Infinity,\n                repeatType: \"loop\"\n              }}\n            />\n          );\n        })}\n\n        {/* Center connections */}\n        {diamond.map((d, i) => (\n          <motion.line\n            key={`center-${i}`}\n            x1={0}\n            y1={0}\n            x2={d.x}\n            y2={d.y}\n            stroke=\"gray\"\n            strokeWidth=\"1.5\"\n            strokeDasharray=\"4,4\"\n            initial={{ pathLength: 0 }}\n            animate={{ pathLength: [0, 1, 1] }}\n            transition={{\n              duration,\n              times,\n              ease: \"easeInOut\",\n              repeat: Infinity,\n              repeatType: \"loop\"\n            }}\n          />\n        ))}\n\n        {/* Dots animation */}\n        {circle.map((cPos, i) => (\n          <motion.circle\n            key={`dot-${i}`}\n            r={dotSize / 2}\n            fill={diamond[i].color}\n            initial={{ cx: cPos.x, cy: cPos.y }}\n            animate={{\n              cx: [cPos.x, diamond[i].x, diamond[i].x],\n              cy: [cPos.y, diamond[i].y, diamond[i].y]\n            }}\n            transition={{\n              duration,\n              times,\n              ease: \"easeInOut\",\n              repeat: Infinity,\n              repeatType: \"loop\"\n            }}\n          />\n        ))}\n\n        {/* Center dot */}\n        <circle cx={0} cy={0} r={centerSize / 2} fill=\"black\" />\n      </svg>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}